<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.youran.generate.dao.GenHistoryDAO">

    <sql id="genHistoryColumns">
        ${alias}.history_id,
        ${alias}.project_id,
        ${alias}.remote_url,
        ${alias}.`commit`,
        ${alias}.branch,
        ${alias}.sys_version,
        ${alias}.project_version,
        ${alias}.create_date,
        ${alias}.create_by,
        ${alias}.operate_date,
        ${alias}.operate_by,
        ${alias}.version,
        ${alias}.del_sign
    </sql>


    <select id="findById" resultType="GenHistoryPO">
        select
        <include refid="genHistoryColumns"><property name="alias" value="t"/></include>
        from gen_history t
        <where>
            and t.del_sign=0
            and t.history_id = #{arg0}
        </where>
    </select>

    <select id="exist" resultType="boolean">
        select count(1) from gen_history
        <where>
            and del_sign=0
            and history_id = #{arg0}
        </where>
    </select>

    <insert id="_save" useGeneratedKeys="true" keyProperty="historyId" parameterType="GenHistoryPO">
        insert into gen_history(
        history_id,
        project_id,
        remote_url,
        `commit`,
        branch,
        sys_version,
        project_version,
        create_date,
        create_by,
        operate_date,
        operate_by,
        version,
        del_sign
        ) VALUES (
        #{historyId,jdbcType=INTEGER},
        #{projectId,jdbcType=INTEGER},
        #{remoteUrl,jdbcType=VARCHAR},
        #{commit,jdbcType=VARCHAR},
        #{branch,jdbcType=VARCHAR},
        #{sysVersion,jdbcType=VARCHAR},
        #{projectVersion,jdbcType=INTEGER},
        #{createDate,jdbcType=TIMESTAMP},
        #{createBy,jdbcType=VARCHAR},
        #{operateDate,jdbcType=TIMESTAMP},
        #{operateBy,jdbcType=VARCHAR},
        #{version,jdbcType=INTEGER},
        #{delSign,jdbcType=INTEGER}
        )
    </insert>


    <update id="_update" parameterType="GenHistoryPO">
        update gen_history set
        history_id=#{historyId,jdbcType=INTEGER},
        project_id=#{projectId,jdbcType=INTEGER},
        remote_url=#{remoteUrl,jdbcType=VARCHAR},
        `commit`=#{commit,jdbcType=VARCHAR},
        branch=#{branch,jdbcType=VARCHAR},
        sys_version=#{sysVersion,jdbcType=VARCHAR},
        project_version=#{projectVersion,jdbcType=INTEGER},
        create_date=#{createDate,jdbcType=TIMESTAMP},
        create_by=#{createBy,jdbcType=VARCHAR},
        operate_date=#{operateDate,jdbcType=TIMESTAMP},
        operate_by=#{operateBy,jdbcType=VARCHAR},
        version = version+1,
        del_sign=#{delSign,jdbcType=INTEGER}
        where history_id=#{historyId,jdbcType=INTEGER}
        and version=#{version,jdbcType=INTEGER}
        and del_sign=0
    </update>

    <delete id="delete">
        update gen_history set del_sign=1
        where history_id=#{arg0,jdbcType=INTEGER}
        and del_sign=0
    </delete>


    <sql id="queryCondition">
        <if test="projectId != null  ">
            and t.project_id = #{projectId}
        </if>
    </sql>


    <select id="findCountByQuery" parameterType="GenHistoryQO" resultType="int">
        select count(1) from gen_history t
        <where>
            and t.del_sign=0
            <include refid="queryCondition"/>
        </where>
    </select>

    <select id="findListByQuery" parameterType="GenHistoryQO" resultType="GenHistoryListVO">
        select * from gen_history t
        <where>
            and t.del_sign=0
            <include refid="queryCondition"/>
        </where>
        order by t.create_date desc
        limit #{startIndex},#{pageSize}
    </select>
</mapper>
